import os
from dotenv import load_dotenv

load_dotenv()

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, PhotoSize,
    FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
)
from aiogram.utils.markdown import hpre
from aiogram.utils.token import validate_token

from bot.fsm.states import SessionStates
from app.services.gpt import generate_gpt_response, generate_final_gpt_response
from app.db.database import init_db, save_session
from app.services.ocr import extract_text_from_photo
from app.services.pdf_generator import generate_session_pdf

import asyncio
import tempfile
from io import BytesIO


TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
assert TOKEN, "BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env"
validate_token(TOKEN)

ADMIN_IDS = [191586312]

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å")],
        [KeyboardButton(text="‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?"), KeyboardButton(text="üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")]
    ],
    resize_keyboard=True
)

@dp.message(
    SessionStates.entering_symptoms,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.entering_onset,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.entering_context,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.entering_analyses,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.analysis_details,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.entering_psycho,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.entering_life_events,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.deep_question_1,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.deep_question_2,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.deep_question_3,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
@dp.message(
    SessionStates.deep_question_4,
    F.text.in_({"üöÄ –ù–∞—á–∞—Ç—å", "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?", "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é", "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"})
)
async def handle_unexpected_button(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.")


@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.set_state(SessionStates.choosing_mode)
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Ç–µ–ª–∞, "
        "–Ω–æ –∏ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —ç–º–æ—Ü–∏–π, —Å—Ç—Ä–µ—Å—Å–∞ –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤ –∂–∏–∑–Ω–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=start_keyboard
    )


@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def begin_session(message: Message, state: FSMContext):
    await state.set_state(SessionStates.entering_diagnosis)
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–∏–∞–≥–Ω–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –æ–±—Å—É–¥–∏—Ç—å?\n\n"
        "–ï—Å–ª–∏ –¥–∞, –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª, –µ—Å–ª–∏ –¥–∏–∞–≥–Ω–æ–∑–∞ –Ω–µ—Ç."
    )


@dp.message(SessionStates.entering_diagnosis)
async def handle_diagnosis(message: Message, state: FSMContext):
    diagnosis = message.text.strip().lower()
    await state.update_data(diagnosis=diagnosis)

    if diagnosis in ["–Ω–µ—Ç", "no", "-", "‚Äî", "–Ω–µ–∞"]:
        await state.set_state(SessionStates.entering_analyses)
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –∞–Ω–∞–ª–∏–∑–∞–º.\n\n"
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–Ω–∞–ª–∏–∑—ã? üìÑ\n"
            "‚Äî –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ\n"
            "‚Äî –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ì–µ–º–æ–≥–ª–æ–±–∏–Ω ‚Äî 130, –°–∞—Ö–∞—Ä ‚Äî 5.4¬ª)\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª.\n\n"
            "–¢–∞–∫–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –±—ã–ª–∏ —Å–¥–∞–Ω—ã –∞–Ω–∞–ª–∏–∑—ã."
        )
    else:
        await state.set_state(SessionStates.entering_analyses)
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑–∞–º.\n\n"
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–Ω–∞–ª–∏–∑—ã? üìÑ\n"
            "‚Äî –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ\n"
            "‚Äî –ò–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ì–µ–º–æ–≥–ª–æ–±–∏–Ω ‚Äî 130, –°–∞—Ö–∞—Ä ‚Äî 5.4¬ª)\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª.\n\n"
            "–¢–∞–∫–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –±—ã–ª–∏ —Å–¥–∞–Ω—ã –∞–Ω–∞–ª–∏–∑—ã."
        )


@dp.message(SessionStates.entering_analyses, F.text)
async def handle_analysis_text(message: Message, state: FSMContext):
    text = message.text.strip().lower()

    if text in ["–Ω–µ—Ç", "no", "-", "‚Äî", "–Ω–µ–∞"]:
        await state.update_data(analyses="–Ω–µ—Ç")
        await state.set_state(SessionStates.entering_symptoms)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö.\n\n"
            "–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –≤–∞—Å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ –∏ —Ç.–¥.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–∏–º–ø—Ç–æ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."
        )
    else:
        await state.update_data(analyses=message.text)
        await state.set_state(SessionStates.entering_symptoms)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö.\n\n"
            "–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –≤–∞—Å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n"
            "–ü—Ä–∏–º–µ—Ä—ã: –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ –∏ —Ç.–¥.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–∏–º–ø—Ç–æ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."
        )


@dp.message(SessionStates.entering_analyses, F.photo)
async def handle_analysis_photo(message: Message, state: FSMContext):
    photo: PhotoSize = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    photo_bytes = await bot.download_file(file.file_path)

    text = await extract_text_from_photo(photo_bytes.read())
    await state.update_data(analyses=text)

    await state.set_state(SessionStates.entering_symptoms)
    await message.answer(
        f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{hpre(text)}\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö.\n\n"
        "–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –≤–∞—Å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n"
        "–ü—Ä–∏–º–µ—Ä—ã: –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –±–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ –∏ —Ç.–¥.\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–∏–º–ø—Ç–æ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."
    )



@dp.message(SessionStates.entering_symptoms)
async def handle_custom_symptom(message: Message, state: FSMContext):
    await state.update_data(symptoms=message.text)
    await state.set_state(SessionStates.entering_onset)
    await message.answer("–ö–æ–≥–¥–∞ —ç—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å? –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ: ¬´–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥¬ª, ¬´–Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥¬ª –∏ —Ç.–¥.")


@dp.message(SessionStates.entering_onset)
async def handle_onset(message: Message, state: FSMContext):
    await state.update_data(onset=message.text)
    await state.set_state(SessionStates.entering_context)
    await message.answer("–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç?\n\n"
                         "–ë—ã–ª–∏ –ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä–µ–º–µ–Ω—ã, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –ø–æ—Ç–µ—Ä–∏?")


@dp.message(SessionStates.entering_context)
async def handle_context(message: Message, state: FSMContext):
    await state.update_data(context=message.text)
    await state.set_state(SessionStates.entering_psycho)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –æ –≤–∞—à–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ñ–æ–Ω–µ.\n\n"
        "–í—ã –±—ã –Ω–∞–∑–≤–∞–ª–∏ —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∫–æ—Ä–µ–µ:\n"
        "‚Äî –Ω–∞–ø—Ä—è–∂—ë–Ω–Ω—ã–º\n"
        "‚Äî –æ–ø—É—Å—Ç–æ—à—ë–Ω–Ω—ã–º\n"
        "‚Äî —Ç—Ä–µ–≤–æ–∂–Ω—ã–º\n"
        "–ò–ª–∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
    )


@dp.message(SessionStates.entering_psycho)
async def handle_psycho_state(message: Message, state: FSMContext):
    await state.update_data(psycho_state=message.text)
    await state.set_state(SessionStates.entering_life_events)
    await message.answer(
        "–ë—ã–ª–∏ –ª–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω—ã –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?\n\n"
        "–ü–µ—Ä–µ–µ–∑–¥, —Ä–∞–∑–≤–æ–¥, –ø–æ—Ç–µ—Ä—è –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ, —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π?"
    )


@dp.message(SessionStates.entering_life_events)
async def handle_life_events(message: Message, state: FSMContext):
    await state.update_data(life_events=message.text)
    user_data = await state.get_data()

    await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    gpt_reply, follow_up = await generate_gpt_response(user_data)
    await state.update_data(gpt_reply=gpt_reply, follow_up=follow_up)

    await message.answer(gpt_reply)

    if follow_up:
        await message.answer(follow_up)

    await state.set_state(SessionStates.waiting_follow_up)


@dp.message(SessionStates.waiting_follow_up)
async def handle_follow_up_answer(message: Message, state: FSMContext):
    await state.update_data(follow_up_answer=message.text)
    await state.set_state(SessionStates.deep_question_1)
    await message.answer("–¢–µ–ø–µ—Ä—å –Ω–µ–º–Ω–æ–≥–æ –≥–ª—É–±–∂–µ. –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–∞?")


@dp.message(SessionStates.deep_question_1)
async def handle_deep_q1(message: Message, state: FSMContext):
    await state.update_data(deep_q1=message.text)
    await state.set_state(SessionStates.deep_question_2)
    await message.answer("–ï—Å—Ç—å –ª–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç —ç—Ç–æ –∂–µ —á—É–≤—Å—Ç–≤–æ ‚Äî —Ç—Ä–µ–≤–æ–≥–∏, –æ–±–∏–¥—ã, —Å—Ç–µ—Å–Ω–µ–Ω–∏—è?")

@dp.message(SessionStates.deep_question_2)
async def handle_deep_q2(message: Message, state: FSMContext):
    await state.update_data(deep_q2=message.text)
    await state.set_state(SessionStates.deep_question_3)
    await message.answer("–ï—Å–ª–∏ –±—ã –≤–∞—à —Å–∏–º–ø—Ç–æ–º –±—ã–ª –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ —ç–º–æ—Ü–∏–µ–π ‚Äî —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?")

@dp.message(SessionStates.deep_question_3)
async def handle_deep_q3(message: Message, state: FSMContext):
    await state.update_data(deep_q3=message.text)
    await state.set_state(SessionStates.deep_question_4)
    await message.answer("–ö–æ–≥–¥–∞ –≤—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏, —á—Ç–æ –Ω–µ –º–æ–∂–µ—Ç–µ —á—Ç–æ-—Ç–æ ¬´–ø–µ—Ä–µ–≤–∞—Ä–∏—Ç—å¬ª, ¬´—É–¥–µ—Ä–∂–∞—Ç—å¬ª –∏–ª–∏ ¬´–≤—ã—Ä–∞–∑–∏—Ç—å¬ª?")

@dp.message(SessionStates.deep_question_4)
async def handle_deep_q4(message: Message, state: FSMContext):
    await state.update_data(deep_q4=message.text)
    user_data = await state.get_data()

    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...")
    gpt_reply = await generate_final_gpt_response(user_data)
    await message.answer(gpt_reply)

    consult_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üßë‚Äç‚öïÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", url="http://tatishakirova.ru/")]
        ]
    )
    await message.answer("üí¨ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–±—Å—É–¥–∏—Ç—å —Å–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è, –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ª–∏—á–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:", reply_markup=consult_markup)

    await state.set_state(SessionStates.post_recommendations)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∏–º –ø–æ–∑–∂–µ?\n–ò–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥—Ä—É–≥–∏–º —Å–∏–º–ø—Ç–æ–º–æ–º?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")],
                [KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")]
            ],
            resize_keyboard=True
        )
    )



@dp.message(SessionStates.post_recommendations, F.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
async def save_user_session(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_id = message.from_user.id
    gpt_reply = user_data.get("gpt_reply", "‚Äî")

    save_session(user_id, user_data, gpt_reply)

    await state.clear()
    await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ.",
                         reply_markup=start_keyboard)  # ‚Üê –≤–µ—Ä–Ω—É–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é


@dp.message(F.text == "‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?")
async def about_bot(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –ø–æ–Ω—è—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Å–∏—Ö–æ—Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –≤–∞—à–µ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è. "
        "–û–Ω –Ω–µ —Å—Ç–∞–≤–∏—Ç –¥–∏–∞–≥–Ω–æ–∑–æ–≤, –Ω–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ñ–æ–Ω–µ."
    )

@dp.message(F.text == "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
async def privacy(message: Message):
    await message.answer(
        "–í—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –±–µ–∑ –≤–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è. "
        "–ë–æ—Ç –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Ä–∞—á–∞. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ."
    )

@dp.message(F.text == "/sessions")
async def show_sessions(message: Message):
    import sqlite3
    conn = sqlite3.connect("sessions.db")
    c = conn.cursor()
    c.execute("SELECT user_id, created_at, symptoms, psycho_state, gpt_reply FROM sessions ORDER BY created_at DESC LIMIT 5")
    rows = c.fetchall()
    conn.close()

    if not rows:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return

    for row in rows:
        user_id, created_at, symptoms, psycho, gpt_reply = row


        try:
            user = await bot.get_chat(user_id)
            username = f"@{user.username}" if user.username else user.full_name
        except Exception:
            username = f"<code>{user_id}</code>"

        await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"üïí –î–∞—Ç–∞: {created_at}\n"
            f"üìå –°–∏–º–ø—Ç–æ–º—ã: {symptoms or '-'}\n"
            f"üß† –≠–º–æ—Ü. —Ñ–æ–Ω: {psycho or '-'}\n\n"
            f"üßæ –û—Ç–≤–µ—Ç GPT:\n<blockquote>{gpt_reply or '-'}</blockquote>",
            parse_mode="HTML"
        )



@dp.message(F.text == "/–≤–µ—Ä–Ω—É—Ç—å—Å—è")
async def restore_session(message: Message, state: FSMContext):
    user_id = message.from_user.id

    import sqlite3
    conn = sqlite3.connect("sessions.db")
    c = conn.cursor()
    c.execute("SELECT symptoms, onset, context, analyses, psycho_state, life_events, gpt_reply FROM sessions WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (user_id,))
    row = c.fetchone()
    conn.close()

    if not row:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π.")
        return

    symptoms, onset, context, analyses, psycho_state, life_events, gpt_reply = row

    await message.answer("üîÑ –í–æ—Ç –≤–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è:")
    await message.answer(
        f"üìå –°–∏–º–ø—Ç–æ–º—ã: {symptoms or '‚Äî'}\n"
        f"üïí –ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å: {onset or '‚Äî'}\n"
        f"‚öôÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context or '‚Äî'}\n"
        f"üìã –ê–Ω–∞–ª–∏–∑—ã: {analyses or '‚Äî'}\n"
        f"üß† –≠–º–æ—Ü. —Ñ–æ–Ω: {psycho_state or '‚Äî'}\n"
        f"üåç –°–æ–±—ã—Ç–∏—è: {life_events or '‚Äî'}\n\n"
        f"üß† GPT-–æ—Ç–≤–µ—Ç:\n{gpt_reply or '‚Äî'}"
    )

    await message.answer(
        "üîÅ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")],
            ],
            resize_keyboard=True
        )
    )

@dp.message(F.text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def restart_session(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.\n\n"
        "–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –≤–∞—Å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Å–∏–º–ø—Ç–æ–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ —Ç.–¥.",
        reply_markup=start_keyboard
    )
    await state.set_state(SessionStates.entering_symptoms)




@dp.message(F.text == "/testpdf")
async def test_pdf(message: Message):
    from app.services.pdf_generator import generate_session_pdf
    from aiogram.types import FSInputFile
    import tempfile


    user_data = {
        "symptoms": "–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å",
        "onset": "2 –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥",
        "context": "–°–º–µ–Ω–∞ —Ä–∞–±–æ—Ç—ã, —Å—Ç—Ä–µ—Å—Å",
        "analyses": "–ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, –ú–†–¢",
        "analysis_details": "–ì–µ–º–æ–≥–ª–æ–±–∏–Ω –≤ –Ω–æ—Ä–º–µ, –ú–†–¢ —á–∏—Å—Ç–æ",
        "psycho_state": "–ß—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –∏ —É–ø–∞–¥–æ–∫ —Å–∏–ª",
        "life_events": "–†–∞–∑–≤–æ–¥, –ø–µ—Ä–µ–µ–∑–¥"
    }
    gpt_reply = "–ü–æ—Ö–æ–∂–µ, –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–¥—ã—Ö, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–ª–∏–∑–∫–∏—Ö –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."


    pdf_bytes = generate_session_pdf(user_data, gpt_reply)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        tmp_file.write(pdf_bytes.read())
        tmp_path = tmp_file.name

    await message.answer("üìÑ –í–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π PDF-–æ—Ç—á—ë—Ç:")
    await message.answer_document(FSInputFile(tmp_path, filename="test_session_report.pdf"))


@dp.message(SessionStates.entering_symptoms)
@dp.message(SessionStates.entering_onset)
@dp.message(SessionStates.entering_context)
@dp.message(SessionStates.entering_analyses)
@dp.message(SessionStates.analysis_details)
@dp.message(SessionStates.entering_psycho)
@dp.message(SessionStates.entering_life_events)
@dp.message(SessionStates.deep_question_1)
@dp.message(SessionStates.deep_question_2)
@dp.message(SessionStates.deep_question_3)
@dp.message(SessionStates.deep_question_4)
@dp.message(SessionStates.post_recommendations)
async def handle_unexpected_text(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –≤–≤–µ–¥—è —Ç–µ–∫—Å—Ç.")

async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    init_db()
    asyncio.run(main())
